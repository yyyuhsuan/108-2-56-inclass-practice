---
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

##加、減、乘、除： +, -, *, /
```{r}
a <- c(2, 3, 5)
b <- c(4,-1, 3)
```

```{r}
a+b
a-b
a*b
a/b
```

```{r}
# a+b 即等於
c(2+4, 3+(-1), 5+3)
# a**b 即等於
c(2**4, 3**(-1), 5**3)
```

餘數：%%

次方：** 或 ^
```{r}
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)

a ** b
```

##奇、偶數判斷
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)

sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
```

當向量間不等長度時，R則對短的向量進行Recycle的動作（即Python的Broadcast）:

將其中較短的向量反複堆疊到可以長得跟最長的向量一樣長度。
```{r}
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)

## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
```

當運算的兩物件內容長度不同時，則將其中較短的一個反複堆疊到可以長得跟另一個一樣高時才來運算，稱為recycling
```{r}
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
```

```{r}
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
```

Recycling不只用在數值class, 只要向量間的處理要等長度才合理時，recycling通常也會用在其他的class。
```{r}
paste0(
  c("我叫"), c("小明","小美")
)
```
也等於是
```{r}
paste0(
  c("我叫","我叫"), c("小明","小美")
)
```

```{r}
paste0(
  c("他叫","我叫"), c("小明","小美","大雄")
)
```

##Relational Operators

這節在介紹產生「要/不要」向量的常見手法。
```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)
```

#比較
>,<,<=,>=: 分別為大於、小於、小於等於、大於等於
*數字比較 *時間比較 *可排序類別資料比較
---
##數字比較
#example裡誰的身高大於等於170

```{r}
example$name[c(T,F,T,F)]
```

```{r}
str(example[c("name","height")])

pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170

example$name[pick_above170]
```

不同屆入學學生在2年級的學業表現
```{r}
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
```
```{r}
str(transcript100to103)
```
分析情境：
```{r}
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
```
選成績大於85分
```{r}
# 只要成績大於85的
pick_above85 <-
  transcript100to103$`成績` > 85
```

```{r}
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85人數
table(transcript100to103$學屆[pick_above85])
```

##時間比較:
#example裡誰1998年(含)以後出生
```{r}
example$birthday
class(example$birthday)
typeof(example$birthday)
```

```{r}
print(example[c("name","birthday")])

pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
```

##美元匯率
```{r}
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
```

```{r}
str(exchangeRate)
```

情境:
```{r}
exchangeRate_after98 <-
  list(
    `期間`=exchangeRate$`期間`[pick_after98_01],
    `幣別`=exchangeRate$`幣別`[pick_after98_01],
    `匯率`=exchangeRate$`匯率`[pick_after98_01]
    
  )
```
選1998年1月(含)以後的匯率
```{r}
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
  exchangeRate$期間 >= ymd("1998-01-01")
```
選出1998年1月(含)以後的匯率資料
```{r}
exchangeRate_after98 <-
  list(
    `期間`=exchangeRate$`期間`[pick_after98_01],
    `幣別`=exchangeRate$`幣別`[pick_after98_01],
    `匯率`=exchangeRate$`匯率`[pick_after98_01]
  )
```


##可排序類別資料比較:
#example裡誰零用錢大於1000:
```{r}
print(example[c("name","allowance")])

pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
```

factor資料可進一步分成可排序，與不可排序的，如：
* 可排序： 以年齡層區分的類別，以所得級距區分的類別等。
* 不排序： 性別，學系等。

factor的設定在不調整時內定為不可排序資料，如要改成可排序類別資料，以先前已處理好的example$allowance 為例：
```{r}
example$allowance <- 
  ordered(example$allowance)
```
或在設定為factor時即把levels排好，並ordered=T:
```{r}
example$allowance <-
  factor(
    example$allowance,
    levels=c("0-1000", "1001-2000", "2000+"),
    ordered = T # 設定為可排序factor
  )
```

```{r}
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
```


##刑事案件被害者人數
https://data.gov.tw/dataset/36240
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
```

```{r}
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T) #rm=removed
```
請將list_victimAges_female各元素的class做合理設定。
```{r}
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
```
將levels順序改成: 不詳，總計，0_5歲，12_17歲，…，70歲以上。
```{r}
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
```
可選出「30_39歲以上受害者」的「要/不要」向量：
```{r}
# 先將類別資料設定成可排序類別資料
list_victimAges_female$年齡層 <-
  ordered(list_victimAges_female$年齡層)
pick_above30 <- 
  list_victimAges_female$年齡層 >= "30_39歲"
```
選出「30_39歲以上受害者」的數目
```{r}
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
```

##相等，屬於
*==: 等於

*!=: 不等於

*==與!=可使用於字串

#example裡誰血型B型
```{r}
print(example[c("name","bloodType")])

pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
```

創造可留下偶數的「要/不要」向量pick_evens。
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)

pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
```


#還有一個常用的關聯運算：

%in%: 屬於

左邊元素「一一」檢視是不是屬於右邊元素集合。
```{r}
x <- c(1,5,8)
y <- c(5,8)

# x裡的元素值是不是屬於y集合
x %in% y
```

example裡誰來自大台北
```{r}
print(example[c("name","residence")])

set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
```

創造 可選出來自法商學院的「要/不要」向量，pick_lawBusiness。
```{r}
set_LawBusiness <- c("法學院","商學院")
pick_LawBusiness <- transcript100to103$學院 %in% set_LawBusiness
```


## Negation(否定用法)
在「要/不要」向量前加上!會成為否定句的「要/不要」向量，元素裡的TRUE會轉成FALSE, FALSE則轉成TRUE。
```{r}
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
```

```{r}
print(example[c("name","residence")])

example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
```


##資料狀態
is.na: 有缺失

is.{class/type name}: is.integer, is.character, is.factor … etc
#有時資料有缺失，在R裡會記成NA(即not available)如下例：
```{r}
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)

x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
```

前述的關係判斷遇到NA時，結果都會是NA——即無法判斷。要知道向量內各元素值是否NA，可使用is.na():
```{r}
x2
is.na(x2)
```

example裡誰沒有體重資料
```{r}
print(example[c("name","weight")])

pick_na <- is.na(example$weight)
example$name[pick_na]
```

R還有一種特別的缺失資料NaN (即not a number)，出現在沒有定義的數學運算上，如：
```{r}
0/0
```

創立 可選出缺失資料的「要/不要」向量pick_na, 並計算有多少筆缺失。
```{r}
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)

pick_na <- is.na(list_victimAges_female$數目)
total_na <- sum(pick_na)
print(total_na)
```


##字元偵測
stringr::str_detect()
#example裡誰喜歡美食
```{r}
print(example[c("name","hobby")])

pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
```

常有同學會有以下錯誤寫法:
```{r}
pick_loveFood <- example$hobby == "美食"
pick_loveFood
```

新增一個假設的hobby2:
```{r}
example[["hobby2"]] <- c("美食", "時尚", "美食", "旅遊")

print(example[c("name", "hobby2")])
pick_loveFood2 <- example$hobby2 == "美食"
example$name[pick_loveFood2]
```

#以下資料為新北市垃圾車路線
```{r}
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
  garbageRoutes
```

```{r}
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)  
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
```

由於garbageRoutes的本質是list，所以我們可以使用list所有操作手法，而class為data frame表示它有比典型list的運作多了些工具與變化（後面章節會提）。
```{r}
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
  
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
  stringr::str_detect(
    garbageRoutes$linename,
    "下午"
  )
garbageRoutes$linename[pick_afternoonRoutes]
```



## 閱讀函數說明
```{r}
?str_detect
```

```{r}
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")

# Also vectorised over pattern
str_detect("aecfg", letters)

# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
```


疾病管制署傳染病答問集
找出問題中包含“肺炎”字眼的問題。 
```{r}
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
```

```{r}
pick_pneumonia <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_pneumonia]
```

