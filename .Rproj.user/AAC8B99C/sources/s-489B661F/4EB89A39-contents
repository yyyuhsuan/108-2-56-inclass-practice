---
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.


#5.4 Iteration
Rule of thumb: never copy and paste more than twice.
重覆兩次（包含第一個）okay. 三次…考慮一下迴圈吧！

*找出哪幾筆為“男”：
```{r}
sampleData <- list(
  list("男", 45), list("女", 32), list("男",50), list("男",33), list("女", 21)
)
```
男女只在sampleData每一個元素底下的第一個元素
```{r}
# 前三筆性別
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
```

##5.4.1 Iteration components
我們在使用map時寫copy/paste程序3次，目的在確認：
Sequence: 即[[1]], [[2]], [[3]]出現的位置。
Body: 要重覆做的SOP，即~.x[[1]]。
而map最後會把每次Body的執行結果存在：
Output: 每次body執行完要存的形式，即map最後的list class output。

##5.4.2 Two types of sequence

*反覆要做的事
```{r}
sampleData[[1]][[1]]  
sampleData[[2]][[1]] 
sampleData[[3]][[1]] 
```
使用pipe寫法可以清楚分離sequence及body(SOP)。兩種sequence表示：
```{r}
# 串接寫法(I): external dispatch
sampleData[[1]] %>% {.[[1]]} 
sampleData[[2]] %>% {.[[1]]}
sampleData[[3]] %>% {.[[1]]}

map(sampleData, ~{.x[[1]]})

# 串接寫法(II): internal dispatch
1 %>% {sampleData[[.]][[1]]}  
2 %>% {sampleData[[.]][[1]]}  
3 %>% {sampleData[[.]][[1]]}

map(1:5, ~{sampleData[[.x]][[1]]})
# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
```

*
```{r}
eggs <- rep("雞蛋x1", 8)
library(stringr)
fryEgg <- function(egg){
  str_replace(egg, "雞蛋", "荷包蛋")
}
library(purrr)
# external dispatch
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)

map(eggs, ~fryEgg(.x)) -> friedEggs1

# internal dispatch
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}

map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
```


###vectorized function
```{r}
grade <- c(45, 74, NA)

i<-3

grade_i <- grade[[i]]
if(!is.na(grade_i)){
  if(grade_i >= 60){
    "P"
  } else (grade_i < 60 ) {
    "F"
  }
} else {
  "缺考"
}
```

```{r}
pass_or_fail <- function(grade_i){
  if(!is.na(grade_i)){
    if(grade_i >= 60){
      "P"
    } else if(grade_i < 60 ) {
      "F"
    }
  } else {
    "缺考"
  }
}

pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])

# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
```
產生vectorized function
```{r}
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}

map(grade, ~{pass_or_fail(.)}) # map to list

map_chr(grade, ~{pass_or_fail(.)}) # map to atom. vectof of class character

map_pass_fail <- function(grade){
  map_chr(grade, ~{pass_or_fail(.)})
}
```

```{r}
map_pass_fail(grade)
```

*若你確信你map的list輸出每個元素只有一個值，且大家都相同class，則你可以依class的類形使用：
map_chr
map_lgl
map_dbl, map_int
省了unlist那一步。

```{r}
rm(grade)
map_pass_fail(c(77,43,68,NA))
```


##Internal dispatching的優勢
當Body要同時對多個物件同時進行「元素一一處理」時，internal dispatch便顯得便利：
```{r}
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)

toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
  if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
  if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
  if(is.null(ham) || !str_detect(ham, "火腿")){stop("少了火腿")}
  "火腿蛋三明治"
}

# 土司、火腿、蛋 第一份出列
1 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第二份出列
2 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第三份出列
3 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}


map(1:10,
    ~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
```

*各系課程規劃
執行以下程序可以得到臺北大學100-107學年的開課資料courseStructure：
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
```

一位剛入學的經濟系新生想大致了解他系上對他未來四年的課程規劃是什麼？於是他想先看一下過去狀況。
以100學年入學之經濟系學生為對象，找出這群學生大一到大四的系上課程規劃是什麼？
```{r}
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3

# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])

# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])

# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])

# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])
```

100學年1年級-103學年4年級，有哪幾行是一模一樣的？
```{r}
pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
unique(courseStructure$`科目名稱`[pick])
```
上的SOP要能運作，哪些物件要存在執行環境？
courseStructure, acadYear_i, grade_i

形成函數
```{r}
get_courses <- function(acadYear_i, grade_i, courseStructure){
  pick <-
  (courseStructure$`學年`==acadYear_i 
    &
    str_detect(courseStructure$`應修系級`, grade_i))
  
  return(
    unique(courseStructure$`科目名稱`[pick])
  )
}
```
重寫100學年1年級-103學年4年級
```{r}
# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
get_courses(acadYear_i, grade_i, courseStructure)

# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
get_courses(acadYear_i, grade_i, courseStructure)

# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
get_courses(acadYear_i, grade_i, courseStructure)

# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
get_courses(acadYear_i, grade_i, courseStructure)
```

濃縮
```{r}
# 100學年 1年級
get_courses(academicYears[[1]], allGrades[[1]], courseStructure)

# 101學年 2年級
get_courses(academicYears[[2]], allGrades[[2]], courseStructure)

# 102學年 3年級
get_courses(academicYears[[3]], allGrades[[3]], courseStructure)

# 103學年 4年級
get_courses(academicYears[[4]], allGrades[[4]], courseStructure)
```

使用pipe
```{r}
1 %>% 
  {get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
2 %>% 
  {get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
3 %>% 
  {get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
4 %>% 
  {get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
```

使用map
```{r}
1:4 %>%
  map(~{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)})
```

